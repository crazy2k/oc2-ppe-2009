#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble
\date{}
\setcounter{page}{-1}
\end_preamble
\use_default_options false
\language spanish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title

\series bold
\shape smallcaps
Organización del Computador II
\end_layout

\begin_layout Standard
\align center

\shape italic
\size large
Departamento de Computación,
\begin_inset Newline newline
\end_inset

 Facultad de Ciencias Exactas y Naturales,
\begin_inset Newline newline
\end_inset

Universidad de Buenos Aires
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\shape smallcaps
\size larger
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features>
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\align center

\series bold
\shape smallcaps
\size larger
Trabajo Práctico 2: System Programming
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Primer Cuatrimestre de 2009
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
Grupo "UNPCKHPD"
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row topspace="default">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pablo Antonio
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
290/08
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pabloa@gmail.com
\end_layout

\end_inset
</cell>
</row>
<row topspace="default">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pablo Herrero
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
332/07
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pablodherrero@gmail.com
\end_layout

\end_inset
</cell>
</row>
<row topspace="default">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Estefanía Porta
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
451/04
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
estef.barbara@gmail.com
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
Los procesadores de la 
\emph on
arquitectura IA-32
\emph default
 proveen soporte, estructuras y mecanismos, para la implementación de:
\end_layout

\begin_layout Itemize
ciertas técnicas para el manejo de memoria,
\end_layout

\begin_layout Itemize
un sistema de administración de tareas,
\end_layout

\begin_layout Itemize
la atención de interrupciones y excepciones,
\end_layout

\begin_layout Itemize
entre otras.
\end_layout

\begin_layout Standard
Los sistemas operativos que se escriban para esta arquitectura pueden, entonces,
 sacar provecho del soporte que provee el procesador.
 Es el caso del sistema operativo 
\emph on
JOS
\emph default
.
\end_layout

\begin_layout Standard
El presente trabajo práctico se basa en 
\emph on
completar ciertas funciones faltantes
\emph default
 en una versión del sistema operativo JOS provista por la cátedra.
 Dichas funciones se orientan a:
\end_layout

\begin_layout Itemize
generar un 
\emph on
stack backtrace
\emph default
, el cual podrá ser invocado mediante un comando en el 
\emph on
kernel monitor
\emph default
 (la parte interactiva del kernel que provee una línea de comandos)
\end_layout

\begin_layout Itemize
proveer cierta funcionalidad necesaria para 
\emph on
administrar el sistema de paginación
\emph default
 que utiliza el sistema operativo
\end_layout

\begin_layout Subsection

\emph on
Stack backtrace
\end_layout

\begin_layout Standard
Examinemos un fragmento de código en C, y cuál sería un posible 
\emph on
assembly
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
(en el dialecto de Intel)
\end_layout

\end_inset


\emph default
 de x86 resultante luego de su compilación:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void a() {
\end_layout

\begin_layout Plain Layout

	int x = 0;
\end_layout

\begin_layout Plain Layout

	b(1);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void b(int y) {
\end_layout

\begin_layout Plain Layout

	int z = y;
\end_layout

\begin_layout Plain Layout

    // breakpoint
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,language={[x86masm]Assembler},tabsize=4"
inline false
status open

\begin_layout Plain Layout

a:
\end_layout

\begin_layout Plain Layout

    push ebp
\end_layout

\begin_layout Plain Layout

    mov ebp, esp
\end_layout

\begin_layout Plain Layout

    sub esp, 4
\end_layout

\begin_layout Plain Layout

    mov [ebp-4], 0
\end_layout

\begin_layout Plain Layout

    push 1
\end_layout

\begin_layout Plain Layout

    call b
\end_layout

\begin_layout Plain Layout

    add esp, 8
\end_layout

\begin_layout Plain Layout

    pop ebp
\end_layout

\begin_layout Plain Layout

    ret
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

b:
\end_layout

\begin_layout Plain Layout

    push ebp
\end_layout

\begin_layout Plain Layout

    mov ebp, esp
\end_layout

\begin_layout Plain Layout

    sub esp, 4
\end_layout

\begin_layout Plain Layout

    mov ecx, [ebp+8]
\end_layout

\begin_layout Plain Layout

    mov [ebp-4], ecx
\end_layout

\begin_layout Plain Layout

    ; breakpoint
\end_layout

\begin_layout Plain Layout

    add esp, 4
\end_layout

\begin_layout Plain Layout

    pop ebp
\end_layout

\begin_layout Plain Layout

    ret
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Si hiciéramos una llamada a la función 
\family typewriter
a()
\family default
, y nos detuviéramos a observar el estado del 
\emph on
stack
\emph default
 inmediatamente después de ejecutar la instrucción anterior al 
\emph on
breakpoint
\emph default
, encontraríamos lo siguiente
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
En la figura, las direcciones menores son las que se encuentran ubicadas
 más abajo.
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features>
<column alignment="right" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\}$
\end_inset

 variables locales de la función
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $D_{1}\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\}$
\end_inset

 parámetros para la función a llamar
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
eip
\family default
 (
\family typewriter
ret
\family default
 de 
\family typewriter
a
\family default
)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\}$
\end_inset

 dirección de retorno a la función
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ebp
\family default
 
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ebp
\family default
 de a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\}$
\end_inset

 
\family typewriter
ebp
\family default
 de la función llamada
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
esp
\family default
 
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[
\begin_inset Formula $D_{1}$
\end_inset

] == 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\}$
\end_inset

 variables locales de la función llamada
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Es decir, si se respeta la convención de llamadas del lenguaje C, puede
 interpretarse al stack como una secuencia de 
\emph on
stack frames
\emph default
 de las funciones, conformados, cada uno de ellos, por:
\end_layout

\begin_layout Itemize
el
\family typewriter
 ebp 
\family default
correspondiente a la función
\end_layout

\begin_layout Itemize
las variables locales de la función (si las hay)
\end_layout

\begin_layout Itemize
los parámetros para la función que se llamará (si se requieren)
\end_layout

\begin_layout Itemize
la dirección de retorno, que será el valor de 
\family typewriter
eip
\family default
 una vez que retorne la función llamada (si es que se llama a una función)
\end_layout

\begin_layout Standard
Se pedía escribir la implementación de una de las funciones faltantes, que
 se puede invocar desde el 
\emph on
kernel monitor
\emph default
, llamada 
\family typewriter
mon_backtrace()
\family default
.
 Esta función se encarga de realizar un 
\emph on
stack backtrace
\emph default
, es decir, mostrar la secuencia de los 
\emph on
stack frames
\emph default
 de una manera específica.
 Para cada función, deben mostrarse:
\end_layout

\begin_layout Enumerate
el 
\family typewriter
ebp
\family default
 correspondiente a la función
\end_layout

\begin_layout Enumerate
la dirección a la cual retornará la función
\end_layout

\begin_layout Enumerate
cinco 
\begin_inset Quotes eld
\end_inset

parámetros
\begin_inset Quotes erd
\end_inset

 que recibió la función al ser llamada
\begin_inset Foot
status open

\begin_layout Plain Layout
En realidad, se imprimen cinco valores que son los primeros cinco parámetros
 de la función 
\emph on
si esta recibe cinco o más parámetros
\emph default
.
 Si la función recibe menos de cinco parámetros, algunos de los valores
 no serán útiles (no son parámetros de la función).
\end_layout

\begin_layout Plain Layout
Podría observarse, si existiera, la información de 
\emph on
debugging 
\emph default
correspondiente a la función para conocer el número de parámetros que esta
 recibe, y así poder mostrar exactamente (ni más ni menos) todos los parámetros
 de la función.
 Sin embargo, esto no se pide.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Administración de memoria: Segmentación
\end_layout

\begin_layout Standard
La 
\emph on
administración de memoria mediante segmentación
\emph default
 se implementó desde hace mucho tiempo atrás en la familia de procesadores
 de Intel.
 En los 8086 de Intel (que vieron el mercado en 1978), la segmentación,
 no obstante, fue implementada de una manera rudimentaria, únicamente con
 los fines de acceder a posiciones de memoria cuya dirección no cabía en
 los registros del procesador.
 Por esos tiempos, en la arquitectura de Intel, no se utilizaba la segmentación
 como un mecanismo para proteger espacios de memoria.
\end_layout

\begin_layout Standard
Con la aparición del procesador 80286 (1982) --- inclusión del 
\emph on
modo protegido
\emph default
 --- se hizo posible la definición de los tamaños y privilegios asignados
 a cada uno de los segmentos.
 Así, la segmentación pudo utilizarse para realizar protección de memoria,
 es decir, restringir el acceso de determinadas tareas a ciertos sectores
 de la memoria, logrando así, por ejemplo, que las aplicaciones no puedan
 acceder o modificar datos pertenecientes al sistema operativo.
\end_layout

\begin_layout Standard
Sin embargo, en una gran cantidad de sistemas operativos modernos (también
 es el caso de JOS), la segmentación fue dejada de lado como mecanismo de
 protección de memoria.
 Se utiliza, para esto, únicamente la 
\emph on
paginación
\emph default
.
\end_layout

\begin_layout Standard
No obstante, la segmentación no puede ser desactivada en la arquitectura
 IA-32, en ninguno de sus modos.
 ¿Cómo hacen entonces los sistemas operativos modernos (que no precisan
 de la segmentación) para desactivarla? En realidad, no la desactivan.
 Utilizan algo llamado 
\begin_inset Quotes eld
\end_inset

Modelo flat de segmentación
\begin_inset Quotes erd
\end_inset

, que consiste en ubicar a todos los segmentos ocupando todo el espacio
 que se pretende direccionar, desde la dirección cero.
 De este modo, la dirección (la parte del offset, específicamente) virtual
 (la utilizada en el código) coincide con la dirección lineal (la que toma
 como entrada el módulo de paginación).
\end_layout

\begin_layout Subsection
Administración de memoria: Paginación
\end_layout

\begin_layout Standard
La verdadera protección de memoria en JOS (y en muchos sistemas operativos
 modernos) se da gracias al 
\emph on
mecanismo de paginación
\emph default
.
 La paginación se caracteriza por organizar la memoria física en bloques
 de tamaño fijo, no solapados, llamados 
\emph on
marcos de página
\emph default
.
\end_layout

\begin_layout Standard
Observemos las distintas etapas por las cuales pasa una 
\emph on
dirección virtual
\emph default
 hasta que se convierte en una 
\emph on
dirección física
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="5">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dirección virtual
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\Longrightarrow_{1}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dirección lineal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\Longrightarrow_{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dirección física
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
La primer traducción (1) la realiza la 
\emph on
unidad de segmentación
\emph default
, mientras que la segunda traducción (2) es realizada por la 
\emph on
unidad de paginación
\emph default
.
\end_layout

\begin_layout Standard
En la arquitectura IA-32 la paginación puede activarse
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Esto se hace escribiendo el valor 1 en el bit 31 del registro de control
 
\family typewriter
CR0.
\end_layout

\end_inset

 una vez hecho el cambio a modo protegido.
 Cuando se encuentra activada, y se utilizan páginas
\begin_inset Foot
status open

\begin_layout Plain Layout
En el código fuente del sistema operativo JOS, y también aquí, se llama
 páginas a los marcos de página.
\end_layout

\end_inset

 de 4KB, la dirección lineal es dividida en tres partes por la unidad de
 paginación:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
índice en el directorio de páginas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
índice en la tabla de páginas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
offset
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(10 bits)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(10 bits)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(12 bits)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
El primero de los tres campos representa un índice en el 
\emph on
directorio de páginas
\emph default
.
 El directorio de páginas es una tabla que contiene 
\begin_inset Formula $2^{10}$
\end_inset

 entradas (una por cada índice posible).
 Cada entrada, además de varios atributos, contiene la dirección física
 de una 
\emph on
tabla de páginas
\emph default
.
 El sistema de paginación utiliza el primer campo para seleccionar una de
 las entradas en el directorio de páginas (
\emph on
PDE
\emph default
s
\begin_inset Foot
status open

\begin_layout Plain Layout

\emph on
Page Directory Entry
\end_layout

\end_inset

).
 Consecuentemente, se obtendrá la dirección física de la tabla de páginas
 asociada a dicha entrada.
\end_layout

\begin_layout Standard
El segundo campo es utilizado, entonces, para elegir una de las 
\begin_inset Formula $2^{10}$
\end_inset

 entradas de la tabla de páginas mencionada.
 Las entradas en la tabla de páginas (
\emph on
PTEs
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout

\emph on
Page Table Entry
\end_layout

\end_inset

) contienen, además de varios atributos, la dirección física de una página
 en memoria.
 El 
\emph on
offset
\emph default
 es utilizado para seleccionar uno de los bytes en dicha página.
\end_layout

\begin_layout Section
Desarrollo
\end_layout

\begin_layout Subsection
Estructuras importantes
\end_layout

\begin_layout Standard
El sistema operativo JOS asigna a cada marco de página de 4KB en memoria
 física, una instancia de la estructura 
\family typewriter
Page
\family default
.
\end_layout

\begin_layout Subsection
Funciones desarrolladas
\end_layout

\begin_layout Subsubsection
Función 
\family typewriter
page_alloc
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
int page_alloc(struct Page **pp_store);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Paragraph*

\series bold
Parámetros:
\end_layout

\begin_layout Itemize

\family typewriter
pp_store
\family default
 es un puntero a un puntero a una página.
 En el puntero que este referencia se alojará la dirección en memoria de
 la página obtenida.
\end_layout

\begin_layout Paragraph*
Archivo en el que se halla la función: 
\family typewriter
kern/pmap.c
\end_layout

\begin_layout Paragraph*
Descripción:
\end_layout

\begin_layout Standard
Si quedan páginas físicas disponibles (caso contrario, devuelve un código
 de error), 
\family typewriter
page_alloc
\family default
 obtiene la primera página de la lista 
\family typewriter
page_free_list
\family default
 (la lista que contiene las páginas libres), haciendo uso de la conveniente
 macro 
\family typewriter
LIST_FIRST
\family default
, y luego la elimina de dicha lista mediante 
\family typewriter
LIST_REMOVE
\family default
.
 Finalmente, la dirección de memoria de la página obtenida se guarda en
 el puntero refenciado por el parámetro 
\family typewriter
pp_store
\family default
.
\end_layout

\begin_layout Subsubsection
Función 
\family typewriter
page_free
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
void page_free(struct Page *pp) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Paragraph*

\series bold
Parámetros:
\end_layout

\begin_layout Itemize

\family typewriter
pp
\family default
 es un puntero a la página que se quiere volver a insertar en la lista de
 páginas disponibles.
\end_layout

\begin_layout Paragraph*
Archivo en el que se halla la función: 
\family typewriter
kern/pmap.c
\end_layout

\begin_layout Paragraph*
Descripción:
\end_layout

\begin_layout Standard
Esta función vuelve a ubicar la pagina apuntada por 
\family typewriter
pp
\family default
 en la lista 
\family typewriter
page_free_list
\family default
, simplemente llamando a la macro 
\family typewriter
LIST_INSERT_HEAD
\family default
, que ubica la página al principio de la lista.
\end_layout

\begin_layout Subsubsection
Función 
\family typewriter
pgdir_walk
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
int pgdir_walk(pde_t *pgdir, const void *va, int create, pte_t **pte_store)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Paragraph*

\series bold
Parámetros:
\end_layout

\begin_layout Itemize

\family typewriter
pgdir
\family default
 es un puntero a un directorio de páginas (en realidad, a su primera entrada),
 el cual se utilizará para hallar la dirección física de la tabla de páginas
 asociada a la dirección 
\family typewriter
va
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
va
\family default
 es la dirección virtual/lineal cuya PTE asociada (en realidad, la dirección
 de esta) se quiere obtener.
\end_layout

\begin_layout Itemize

\family typewriter
create
\family default
 indica si debe crearse la página asociada a la dirección en caso de que
 esta no esté presente.
\end_layout

\begin_layout Itemize

\family typewriter
pte_store
\family default
 es un puntero a un puntero a una PTE.
 En el puntero que este referencia se alojará la dirección de la PTE asociada
 a la dirección.
\end_layout

\begin_layout Paragraph*
Archivo en el que se halla la función: 
\family typewriter
kern/pmap.c
\end_layout

\begin_layout Paragraph*
Descripción:
\end_layout

\begin_layout Standard
Como se usa un 
\emph on
modelo flat para la segmentación
\emph default
, la dirección lineal de 
\family typewriter
va
\family default
 es idéntica a la virtual.
 De este modo, pueden obtenerse los índices sobre el directorio y la tabla
 de páginas utilizando directamente las macros 
\family typewriter
PDX
\family default
 y 
\family typewriter
PTX
\family default
 sobre 
\family typewriter
va
\family default
.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Estas macros obtienen el índice en el directorio de páginas y en la tabla
 de páginas respectivamente, a partir de la dirección que se les pasa.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El primer paso es obtener la entrada del directorio (PDE) correspondiente
 a la tabla de páginas asociada a la dirección.
 Esta se obtiene fácilmente direccionando sobre 
\family typewriter
pgdir
\family default
 y utilizando 
\family typewriter
PDX(va)
\family default
 como índice.
\end_layout

\begin_layout Standard
sdsdsd ME QUEDÉ ACÁ
\end_layout

\begin_layout Standard
Luego si la tabla de paginas estaba presente, simplemente direccionamos
 sobre la misma utilizando, PTX(va), y guardamos un puntero a la entry obtenida
 en pte_store.
\end_layout

\begin_layout Standard
Si la tabla no esta presente, devolvemos un error; a menos q el parametro
 'create' sea igual a 1.
 En tal caso procedemos a reservar memoria fisica para la misma.
\end_layout

\begin_layout Standard
Como primer paso obtenemos una pagina libre llamando a la funcion page_alloc,
 si esta no posee mas memoria disponible, retornamos error.
 Si la llamada tiene exito, obtenemos su direccion fisica mediante, page2pa.
 Y escribimos en la entry del directorio obtenida anteriormente; cual es
 la direccion fisica correspondiente, y que los campos presente (P) y de
 escritura (W) estan activos.
 Finalmente usando esta direccion fisica, calculamos su direccion virtual
 mediante KADDR, y le sumamos el valor de PTX(va), para obtener la direccion
 virtual del entry en la pagina de tablas.
 Valor q luego se guarda en pte_store.
 Por ultimo seteamos en 0 todos los bytes de la tabla, mediante memset,
 indicando que ninguna de las paginas de la misma se encuentra presente
 en memoria fisica.
 
\end_layout

\begin_layout Section
Conclusiones
\end_layout

\begin_layout Section*
Referencias
\end_layout

\begin_layout Itemize
Intel 64 and IA-32 Architectures Software 1: Basic Architecture
\end_layout

\begin_layout Itemize
Intel 64 and IA-32 Architectures Software 2A: Instruction Set Reference,
 A-M
\end_layout

\begin_layout Itemize
Intel 64 and IA-32 Architectures Software 2B: Instruction Set Reference,
 N-Z
\end_layout

\begin_layout Itemize
Documentación del NASM: http://www.nasm.us/doc/
\end_layout

\begin_layout Itemize
http://en.wikipedia.org/wiki/Instruction_prefetch
\end_layout

\begin_layout Itemize
Intel 64 and IA-32 Architectures Optimization Reference Manual 
\end_layout

\end_body
\end_document
